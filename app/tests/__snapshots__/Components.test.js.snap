// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppButton disabled button - renders correctly 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "grey",
      "borderColor": "#05750C",
      "borderRadius": 20,
      "borderWidth": 1,
      "height": 65,
      "justifyContent": "center",
      "marginBottom": 30,
      "opacity": 1,
      "padding": 15,
      "width": 200,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "fontSize": 16,
        },
        Array [
          Object {
            "fontSize": 16,
            "fontWeight": "bold",
            "textTransform": "uppercase",
          },
          undefined,
        ],
      ]
    }
  >
    test
  </Text>
</View>
`;

exports[`AppButton enabled button - renders correctly 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "white",
      "borderColor": "#05750C",
      "borderRadius": 20,
      "borderWidth": 1,
      "height": 65,
      "justifyContent": "center",
      "marginBottom": 30,
      "opacity": 1,
      "padding": 15,
      "width": 200,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "fontSize": 16,
        },
        Array [
          Object {
            "fontSize": 16,
            "fontWeight": "bold",
            "textTransform": "uppercase",
          },
          undefined,
        ],
      ]
    }
  >
    test
  </Text>
</View>
`;

exports[`AppIconButton renders correctly 1`] = `
<View
  accessible={true}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
      "width": 20,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "white",
        },
        Object {
          "borderRadius": 10,
          "width": 20,
        },
      ]
    }
  />
</View>
`;

exports[`AppModalScreen AppModalScreen active - renders correctly 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  onRequestClose={[Function]}
  statusBarTranslucent={true}
  visible={true}
>
  test
</Modal>
`;

exports[`AppModalScreen AppModalScreen functions no specific - closeModal and backbutton are the same function 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  onRequestClose={[Function]}
  statusBarTranslucent={true}
  visible={true}
>
  function closeModal() {
    activeControl(false);
  } function backButton() {
      return closeModal();
    }
</Modal>
`;

exports[`AppModalScreen AppModalScreen functions specific - closeModal and backbutton are different functions 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  onRequestClose={[Function]}
  statusBarTranslucent={true}
  visible={true}
>
  function closeModal() {
    activeControl(false);
  } function backButton() {
        return "test";
      }
</Modal>
`;

exports[`AppModalScreen AppModalScreen not active - renders correctly 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  onRequestClose={[Function]}
  statusBarTranslucent={true}
  visible={false}
>
  test
</Modal>
`;

exports[`AppPicker AppPicker - renders correctly 1`] = `
Array [
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    style={
      Object {
        "backgroundColor": "black",
      }
    }
    visible={false}
  >
    <Text
      style={
        Array [
          Object {
            "fontSize": 16,
          },
          Array [
            Object {
              "fontSize": 30,
              "fontWeight": "bold",
              "marginBottom": 20,
            },
            Object {
              "alignSelf": "center",
              "marginTop": 20,
            },
          ],
        ]
      }
    >
      Pick a category
    </Text>
    <RCTScrollView
      data={
        Array [
          Object {
            "icon": "bed",
            "id": 1,
            "name": "Sleep",
            "size": 20,
          },
          Object {
            "icon": "food",
            "id": 2,
            "name": "Eat",
            "size": 20,
          },
          Object {
            "icon": "biathlon",
            "id": 3,
            "name": "Adventure",
            "size": 20,
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "width": "100%",
              }
            }
          >
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#EEEEEE",
                  "borderBottomColor": "black",
                  "borderColor": "white",
                  "borderWidth": 2,
                  "height": 50,
                  "justifyContent": "center",
                  "marginBottom": 10,
                  "opacity": 1,
                  "width": "85%",
                }
              }
            >
              <Text
                style={
                  Array [
                    Object {
                      "fontSize": 16,
                    },
                    Array [
                      Object {
                        "fontSize": 16,
                        "fontWeight": "bold",
                        "paddingLeft": 15,
                        "textTransform": "uppercase",
                      },
                    ],
                  ]
                }
              >
                Sleep
              </Text>
            </View>
          </View>
        </View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "width": "100%",
              }
            }
          >
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#EEEEEE",
                  "borderBottomColor": "black",
                  "borderColor": "white",
                  "borderWidth": 2,
                  "height": 50,
                  "justifyContent": "center",
                  "marginBottom": 10,
                  "opacity": 1,
                  "width": "85%",
                }
              }
            >
              <Text
                style={
                  Array [
                    Object {
                      "fontSize": 16,
                    },
                    Array [
                      Object {
                        "fontSize": 16,
                        "fontWeight": "bold",
                        "paddingLeft": 15,
                        "textTransform": "uppercase",
                      },
                    ],
                  ]
                }
              >
                Eat
              </Text>
            </View>
          </View>
        </View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "width": "100%",
              }
            }
          >
            <View
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#EEEEEE",
                  "borderBottomColor": "black",
                  "borderColor": "white",
                  "borderWidth": 2,
                  "height": 50,
                  "justifyContent": "center",
                  "marginBottom": 10,
                  "opacity": 1,
                  "width": "85%",
                }
              }
            >
              <Text
                style={
                  Array [
                    Object {
                      "fontSize": 16,
                    },
                    Array [
                      Object {
                        "fontSize": 16,
                        "fontWeight": "bold",
                        "paddingLeft": 15,
                        "textTransform": "uppercase",
                      },
                    ],
                  ]
                }
              >
                Adventure
              </Text>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          close
        </Text>
      </View>
    </View>
  </Modal>,
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "borderRadius": 0,
        "borderWidth": 1,
        "flexDirection": "row",
        "height": 35,
        "justifyContent": "space-between",
        "marginBottom": 30,
        "opacity": 1,
        "width": "85%",
      }
    }
  >
    <Text
      style={
        Array [
          Object {
            "fontSize": 16,
          },
          Object {
            "fontSize": 16,
            "fontWeight": "bold",
            "paddingLeft": 15,
            "textTransform": "uppercase",
          },
        ]
      }
    >
      NONE
    </Text>
  </View>,
]
`;

exports[`AppScreen no background - renders correctly 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Array [
      Object {
        "flex": 1,
        "marginTop": 44,
      },
    ]
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  />
</RCTSafeAreaView>
`;

exports[`AppScreen with background - renders correctly 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Array [
      Object {
        "flex": 1,
        "marginTop": 44,
      },
    ]
  }
>
  <View
    accessibilityIgnoresInvertColors={true}
    style={
      Object {
        "flex": 1,
        "height": "100%",
        "width": "100%",
      }
    }
  >
    <Image
      source={1}
      style={
        Array [
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          },
          Object {
            "height": "100%",
            "width": "100%",
          },
          undefined,
        ]
      }
    />
    <View
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    />
  </View>
</RCTSafeAreaView>
`;

exports[`AppScreen with child - child exists 1`] = `true`;

exports[`AppScreen with child - renders correctly 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Array [
      Object {
        "flex": 1,
        "marginTop": 44,
      },
    ]
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    Hello
  </View>
</RCTSafeAreaView>
`;

exports[`AppText AppText - renders correctly 1`] = `
<Text
  style={
    Array [
      Object {
        "fontSize": 16,
      },
      undefined,
    ]
  }
>
  Hello
</Text>
`;
